<?php

function lfz_menu()
{
    $items['class/%/today'] = array(
        'title' => 'Todays Agenda',
        'page callback' => 'todays_agenda_callback',
        'page arguments' => array(1, false),
        'access arguments' => array('view agendas'),
        'expanded' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['class/%/today/%'] = array(
        'title' => 'Todays Agenda',
        'page callback' => 'todays_agenda_callback',
        'page arguments' => array(1, 3),
        'access arguments' => array('view agendas'),
        'expanded' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['today'] = array(
        'title' => 'Todays Agenda',
        'page callback' => 'todays_agenda_callback',
        'page arguments' => array(false, false),
        'access arguments' => array('view agendas'),
        'expanded' => TRUE,
    );
    $items['today/%'] = array(
        'title' => 'Todays Agenda',
        'page callback' => 'todays_agenda_callback',
        'page arguments' => array(false, 1),
        'access arguments' => array('view agendas'),
        'expanded' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['class/%/week'] = array(
        'title' => 'Weekly Agenda',
        'page callback' => 'weekly_agenda_callback',
        'page arguments' => array(1, false),
        'access arguments' => array('view agendas'),
        'expanded' => TRUE,
        'type' => MENU_CALLBACK,
    );
    $items['class/%/week/%'] = array(
        'title' => 'Weekly Agenda',
        'page callback' => 'weekly_agenda_callback',
        'page arguments' => array(1, 3),
        'access arguments' => array('view agendas'),
        'expanded' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['week'] = array(
        'title' => 'Weekly Agenda',
        'page callback' => 'weekly_agenda_callback',
        'access arguments' => array('view agendas'),
        'expanded' => TRUE,
    );

    $items['week/%'] = array(
        'title' => 'Weekly Agenda',
        'page callback' => 'weekly_agenda_callback',
        'page arguments' => array(1),
        'access arguments' => array('view agendas'),
        'expanded' => TRUE,
    );

    $items['ajax/today/add-item'] = array(
        'title' => 'Add Item to agenda',
        'page callback' => 'ajax_agenda_today_add_callback',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );


    $items['ajax/today/add-item/%'] = array(
        'title' => 'Add Item to agenda',
        'page callback' => 'ajax_agenda_today_add_callback',
        'page arguments' => array(3),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['ajax/remove-agenda-item'] = array(
        'title' => 'Remove Item on Agenda',
        'page callback' => 'ajax_remove_agenda_item_callback',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    $items['ajax/today/agenda-items'] = array(
        'title' => 'Display Agenda Items for today',
        'page callback' => 'ajax_get_agenda_items_callback',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['ajax/today/agenda-items/%'] = array(
        'title' => 'Display Agenda Items for today',
        'page callback' => 'ajax_get_agenda_items_callback',
        'page arguments' => array(3),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['ajax/today/add-new-item'] = array(
        'title' => 'Add new item today',
        'page callback' => 'ajax_add_new_agenda_item_callback',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['ajax/today/add-new-item/%'] = array(
        'title' => 'Add new item today w/ date',
        'page callback' => 'ajax_add_new_agenda_item_callback',
        'page arguments' => array(3),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['ajax/agenda-item-types'] = array(
        'title' => 'Agenda Types',
        'page callback' => 'ajax_get_agenda_type_callback',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['ajax/theme/%'] = array(
        'title' => 'js themeing',
        'page callback' => 'ajax_theme_callback',
        'page arguments' => array(2),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['ajax/search/%'] = array(
        'page callback' => 'ajax_agenda_item_search_callback',
        'page arguments' => array(2),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['ajax/agenda-item-save'] = array(
        'page callback' => 'ajax_agenda_item_save',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['skillassessment/list'] = array(
        'title' => 'Assessment Results',
        'page callback' => 'skill_assessment_list_callback',
        'access callback' => 'check_user_roles',
        'access arguments' => array('instructor', 'student'),
//        'type' => MENU_CALLBACK,
    );

    $items['skillassessment/details/%'] = array(
        'page callback' => 'skill_assessment_details_callback',
        'page arguments' => array(2),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['ajax/skillassessment/save-results'] = array(
        'page callback' => 'skill_assessment_save_results_callback',
        'access arguments' => array('manage skill assessments'),
        'type' => MENU_CALLBACK,
    );

    $items['skillassessment/overview'] = array(
        'title' => 'Skill Assessment Overview',
        'page callback' => 'skill_assessment_overview_callback',
        'access arguments' => array('manage skill assessments'),
        'expanded' => TRUE,
    );

    $items['skillassessment/overview/class/%'] = array(
        'title' => 'Skill Assessment Overview Per Class',
        'page callback' => 'skill_assessment_overview_callback',
        'callback arguments' => array(3),
        'page arguments' => array('manage skill assessments'),
        'expanded' => TRUE,
        'type' => MENU_CALLBACK,
    );


    return $items;
}

module_load_include('inc', 'lfz', 'includes/page_callbacks');
module_load_include('inc', 'lfz', 'includes/sa');

/**
 * Implements hook_admin_paths_alter().
 */
function lfz_admin_paths_alter(&$paths)
{
    // $paths['node/*'] = TRUE;
}

function lfz_preprocess_page(&$vars)
{

    // $service = new Google_Service_Books($client);
    // $optParams = array('filter' => 'free-ebooks');
    // $results = $service->volumes->listVolumes('Henry David Thoreau', $optParams);

    // foreach ($results as $item) {
    //   echo $item['volumeInfo']['title'], "<br /> \n";
    // }

}

function lfz_permission()
{
    return array(
        'add agenda items' => array(
            'title' => t('Add Agenda Items'),
            'description' => t('Can add items to an agenda'),
        ),
        'remove agenda items' => array(
            'title' => t('Remove Agenda Items'),
            'description' => t('Can remove items from an agenda'),
        ),
        'view agendas' => array(
            'title' => t('View Agendas'),
            'description' => t('Can view agenda and agenda items'),
        ),
        'view agenda item details' => array(
            'title' => t('View agenda Item Details'),
            'description' => t('Can view agenda and agenda items Detail pages'),
        ),
        'manage skill assessments' => array(
            'title' => t('Manage Skill Assessments'),
            'description' => t('Manage Skill assessments and skill assessment results'),
        ),
    );
}

function lfz_theme($existing, $type, $theme, $path)
{
    $theme = array();
    $theme['page__today'] = array(
        'render element' => 'content',
        'base hook' => 'page',
        'template' => 'page--today',
        'path' => drupal_get_path('module', 'lfz') . '/templates',
    );
    $theme['node__resource'] = array(
        'render element' => 'content',
        'base hook' => 'node',
        'template' => 'node--resource',
        // 'variables' => array('node' => (object)array()),
        'path' => drupal_get_path('module', 'lfz') . '/templates',
    );

    $theme['node__topics'] = array(
        'render element' => 'content',
        'base hook' => 'node',
        'template' => 'node--topics',
        // 'variables' => array('node' => (object)array()),
        'path' => drupal_get_path('module', 'lfz') . '/templates',
    );

    $theme['weekly_agenda'] = array(
        'path' => drupal_get_path('module', 'lfz') . '/templates',
        'template' => 'weekly-agenda',
        'variables' => array('days' => NULL),
    );

    $theme['weekly_agenda_day'] = array(
        'path' => drupal_get_path('module', 'lfz') . '/templates',
        'template' => 'weekly-agenda-day',
        'variables' => array('title' => NULL, 'items' => NULL, 'is_today' => false, 'attr' => array()),
    );

    $theme['agenda_item_list'] = array(
        'path' => drupal_get_path('module', 'lfz') . '/templates',
        'template' => 'agenda-item-list',
        'variables' => array('nid' => NULL, 'title' => NULL, 'resource_type' => NULL, 'node_type' => NULL, 'attr' => NULL, 'removeBtn' => true),
    );

    $theme['agenda_item_heading'] = array(
        'path' => drupal_get_path('module', 'lfz') . '/templates',
        'template' => 'agenda-item-heading',
        'variables' => array('links' => true, 'title' => NULL, 'type' => NULL, 'nid' => NULL),
    );

    $theme['bootstrap_list_group'] = array(
        'path' => drupal_get_path('module', 'lfz') . '/templates',
        'template' => 'bootstrap-list-group',
        'variables' => array('attr' => NULL, 'items' => NULL),
    );
    $theme['bootstrap_list_item'] = array(
        'path' => drupal_get_path('module', 'lfz') . '/templates',
        'template' => 'bootstrap-list-item',
        'variables' => array('attr' => NULL, 'content' => NULL),
    );

    $theme['instructor_comments'] = array(
        'path' => drupal_get_path('module', 'lfz') . '/templates',
        'template' => 'instructor-comments',
        'variables' => array('comments' => NULL),
    );

    $theme['skills_list'] = array(
        'path' => drupal_get_path('module', 'lfz') . '/templates',
        'template' => 'skills-list',
        'variables' => array('comments' => NULL),
    );

    $theme['resource_list'] = array(
        'path' => drupal_get_path('module', 'lfz') . '/templates',
        'template' => 'resource-list',
        'variables' => array('resources' => NULL),
    );

    $theme['resource_item'] = array(
        'path' => drupal_get_path('module', 'lfz') . '/templates',
        'template' => 'resource-item',
        'variables' => array('node' => NULL),
    );

    $theme['related_topics'] = array(
        'path' => drupal_get_path('module', 'lfz') . '/templates',
        'template' => 'related-topics',
        'variables' => array('topics' => NULL),
    );

    $theme['skill_assessment_list'] = array(
        'path' => drupal_get_path('module', 'lfz') . '/templates',
        'template' => 'skill-assessment-list',
        'variables' => array('data' => NULL),
    );

    $theme['skill_assessment_list_item'] = array(
        'path' => drupal_get_path('module', 'lfz') . '/templates',
        'template' => 'skill-assessment-list-item',
        'variables' => array('item' => NULL),
    );

    $theme['skill_assessment_user_list'] = array(
        'path' => drupal_get_path('module', 'lfz') . '/templates',
        'template' => 'skill-assessment-user-list',
        'variables' => array('data' => NULL),
    );

    $theme['calendar_badge'] = array(
        'path' => drupal_get_path('module', 'lfz') . '/templates',
        'template' => 'calendar-badge',
        'variables' => array('time' => time()),
    );

    $theme['bootstrap_media_object'] = array(
        'path' => drupal_get_path('module', 'lfz') . '/templates',
        'template' => 'bootstrap-media-object',
        'variables' => array("media_alignment" => "media-left", "media_html" => "", "heading" => "", "content" => ""),
    );

    $theme['skill_assessment_topic_overview'] = array(
        'path' => drupal_get_path('module', 'lfz') . '/templates',
        'template' => 'skill-assessment-topic-overview',
        'variables' => array("data" => array()),
    );

    return $theme;
}

function _remove_agenda_item_from_agenda($agenda_nid, $item_nid, $index = false)
{
    $agenda_node = $agenda_nid;
    if (!is_object($agenda_node)) {
        $agenda_node = node_load($agenda_nid);
    }

    $r = true;

    if ($item_nid && $agenda_node) {

        if ($agenda_node->field_agenda_item && $agenda_node->field_agenda_item['und']) {
            if ($index !== false) {
                if ($agenda_node->field_agenda_item['und'][$index]['nid'] === $item_nid) {
                    unset($agenda_node->field_agenda_item['und'][$index]);
                } else {
                    $r = false;
                }
            } else {
                //remove all references in this agenda
                for ($i = 0; $i < count($agenda_node->field_agenda_item['und']); $i++) {
                    if ($agenda_node->field_agenda_item['und'][$i]['nid'] === $item_nid) {
                        unset($agenda_node->field_agenda_item['und'][$i]);
                    }
                }
            }

            try {
                node_save($agenda_node);
            } catch (Exception $e) {
                $r = false;
            }
        }
    } else {
        $r = false;
    }

    return $r;
}

function _add_item_to_agenda($agenda_nid, $item_nid, $order = false)
{
    $agenda_node = $agenda_nid;
    if (!is_object($agenda_node)) {
        $agenda_node = node_load($agenda_nid);
    }

    $r = true;

    if ($item_nid && $agenda_node) {
        if (property_exists($agenda_node, 'field_agenda_item')) {
            if (!$agenda_node->field_agenda_item['und']) {
                $agenda_node->field_agenda_item['und'] = array();
            }

            if ($order) {
                array_splice($agenda_node->field_agenda_item['und'], (int)$order, 0, array(array('nid' => $item_nid)));
            } else {
                $agenda_node->field_agenda_item['und'][] = array('nid' => $item_nid);
            }
            try {
                node_save($agenda_node);
            } catch (Exception $e) {
                $r = false;
            }
        } else {
            $r = false;
        }
    } else {
        $r = false;
    }

    return $r;
}

function _prepare_agenda_item($node)
{

    $obj = false;
    if ($node->nid) {
        $obj = array(
            'nid' => $node->nid,
            'title' => $node->title,
            'node_type' => $node->type,
        );

        if (isset($node->field_resource_type) && count($node->field_resource_type) > 0) {
            $obj['resource_type'] = $node->field_resource_type['und'][0]['value'];
        }

    }

    return $obj;
}

function get_agenda_items_by_agenda($agenda_node)
{
    if (!is_object($agenda_node)) {
        $agenda_node = node_load($agenda_node);
    }

    $r = array();
    if ($agenda_node) {
        $items = array();
        if ($agenda_node->field_agenda_item && isset($agenda_node->field_agenda_item['und'])) {
            foreach ($agenda_node->field_agenda_item['und'] as $item) {
                $nid = $agenda_node->field_agenda_item['und'];
                $node_item = node_load($item['nid']);
                if ($node_item) {
                    $r[] = $node_item;
                }
            }
        }
    }

    return (count($r) > 0) ? $r : false;
}

function _agenda_select_class($redirect_url='')
{

    $users_classes = _get_users_classes();
    if (count($users_classes) === 1 &&
        $redirect_url != '') {
        $redirect_url = str_replace("{class_nid}", $users_classes[0]->nid, $redirect_url);
        drupal_goto($redirect_url);
    }

    //add redirect url to the settings to be used by the class select elemtn
    drupal_add_js(array('lfz' => array('redirect_url' => $redirect_url)),
        'setting');

    //add js handling for the class selection and redirecting
    drupal_add_js(drupal_get_path('module', 'lfz') . "/misc/class-select.js");

    return drupal_get_form('lfz_select_class_form', $users_classes);
}

function lfz_select_class_form($form, &$form_state, $class_list = array())
{

    $options = array('0' => ' -- Select Class -- ');
    foreach ($class_list as $class) {
        $options[$class->nid] = $class->title;
    }

    $form['select_class'] = array(
        '#type' => 'select',
        '#title' => t('Select Class'),
        '#options' => $options,
    );

    return $form;
}

function _get_user_class_list()
{

    $user_roles = user_roles();
    $rid_array = array_keys($user_roles);
    $sql_roles = "'" . join("','", $rid_array) . "'";

    $sql = "SELECT node.title AS title, node.nid AS nid
					FROM
					{node} node
					LEFT JOIN {field_data_field_access_roles} field_data_field_access_roles ON node.nid = field_data_field_access_roles.entity_id AND (field_data_field_access_roles.entity_type = 'node' AND field_data_field_access_roles.deleted = '0')
					WHERE (( (node.status = '1') AND (node.type IN  ('class')) AND (field_data_field_access_roles.field_access_roles_value IN (" . $sql_roles . ")) ))
					GROUP BY nid
					ORDER BY title DESC
					LIMIT 10 OFFSET 0";

    $result = db_query($sql);

    return $result->fetchAll();
}

function _create_agenda_by_date($date, $class_nid = false)
{

    $week_data = thisWeekInfo($date);
    $todays_agenda = get_daily_agenda($date, $class_nid);

    //check if a daily agenda exists
    if (!$todays_agenda || !$todays_agenda->nid) {

        $todays_agenda = false;

        //create a new agenda node to track items too
        //need the start of the day in order to create the correct assocaiation for views to search correctly
        if ($class_nid) {
            $todays_agenda = _create_node(array(
                'title' => $week_data['date'],
                'type' => 'agenda',
                'field_date' => array(
                    'und' => array(
                        array(
                            'value' => $week_data['date_ts'],
                            'timezone' => 'America/Los_Angeles',
                            'timezone_db' => 'America/Los_Angeles',
                            'date_type' => 'datestamp',
                        ),
                    ),
                ),
                'field_agenda_item' => array(
                    'und' => array(),
                ),
                'field_class_reference' => array(
                    'und' => array(
                        array('nid' => $class_nid),
                    ),
                ),
            ));
        }

        //if node wasn't create successfully then show error
        if (!$todays_agenda) {
            return false;
        }
    }

    if ($class_nid && count($todays_agenda->field_class_reference) == 0) {
        $todays_agenda->field_class_reference['und'] = array(
            array('nid' => $class_nid),
        );

        try {
            node_save($todays_agenda);
        } catch (Exception $e) {
            return false;
        }
    }

    return $todays_agenda;
}

function get_daily_agenda($date = false, $class_nid = false)
{

    $week_data = thisWeekInfo($date);

    $data = get_view_data('daily/agenda', array($week_data['date'], $class_nid));
    $r = false;
    if ($data['nodes'] && count($data['nodes']) > 0) {
        $r = node_load($data['nodes'][0]['node']['nid']);
    }

    return $r;
}

function get_view_data($url, $args = false)
{

    global $base_url;
    //need to pull base url to handle local and production development
    $url = $base_url . '/' . $url;

    if ($args && count($args) > 0) {
        $url = $url . '/' . implode('/', $args);
    }

    $curl = curl_init();

    curl_setopt_array($curl, array(
        CURLOPT_RETURNTRANSFER => 1,
        CURLOPT_URL => $url,
        CURLOPT_POST => 0,
        CURLOPT_SSL_VERIFYPEER => false,
    ));
    // Send the request & save response to $resp
    $response = curl_exec($curl);
    // Close request to clear up some resources
    curl_close($curl);

    return json_decode($response, TRUE);
}

function lfz_agenda_form($form, &$form_state, $agenda_nid, $class_nid)
{

    if (user_has_role(array_search('content manager', user_roles()))) {
        $form['search'] = array(
            '#type' => 'textfield',
            // '#value'=>t('Add Item'),
            '#attributes' => array(
                'placeholder' => 'Add Item',
                'autocomplete' => 'off',
            ),
            '#prefix' => '<div class="col-xs-5">',
            '#suffix' => '<div id="search-results"></div></div><div class="clearfix"></div>',
        );
    }

    $form['todays_agenda'] = array(
        '#type' => 'item',
        '#markup' => '<div id="todays_agenda" class="list-group sortable" data-agenda-nid="' . $agenda_nid . '" data-class-nid="' . $class_nid . '"></div>',
        '#prefix' => '<div class="col-xs-12">',
        '#suffix' => '</div>',

    );

    $form['modal'] = array(
        '#type' => 'item',
        '#markup' => '<div id="agendaModal" class="modal fade" role="dialog">
							<div class="modal-dialog">
								<!-- Modal content-->
								<div class="modal-content">
									<div class="modal-header">
										<button type="button" class="close" data-dismiss="modal">&times;</button>
										<h4 class="modal-title">Modal Header</h4>
									</div>
									<div class="modal-body">
										<div class="alert-con"></div>
										<div class="content"></div>
									</div>
									<div class="modal-footer">
										<button type="button" class="btn btn-danger" data-dismiss="modal">Cancel</button>
									</div>
								</div>
							</div>
						</div>',
    );

    return $form;
}

function lfz_views_query_alter(&$view, &$query)
{
    //re-write search to have a like conditional

    if ($view->human_name === 'Search'
        && $view->current_display === 'page'
    ) {
        $query->where[0]['conditions'][0]['value'] = '%' . $query->where[0]['conditions'][0]['value'] . "%";
        $query->where[0]['conditions'][0]['operator'] = 'LIKE';
    }
}

function _create_node($arr = array())
{

    global $user;

    function create_agenda($arr)
    {

        //if no title passed for agenda we create title of the current day
        if (!isset($arr['title'])) {
            date_default_timezone_set('America/Los_Angeles');
            $arr['title'] = date("Y-m-d", time());
        }

        return $arr;
    }

    if (!$arr['type']) {
        return false;
    }

    $node = new stdClass();
    //set default values
    $node->title = $arr['type'];
    $node->type = $arr['type'];
    if (isset($arr['body'])) {
        $node->body = $arr['body'];
    }
    node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
    $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
    $node->uid = $user->uid;
    $node->status = 1; //(1 or 0): published or not
    $node->promote = 0; //(1 or 0): promoted to front page
    $node->comment = (isset($arr['comment'])) ? $arr['comment'] : 2; // 0 = comments disabled, 1 = read only, 2 = read/write

    //call function to do defaults for specific types
    $func = "create_" . $arr['type'];
    if (function_exists($func)) {
        //calls function if it exists
        $arr = $func($arr);
    }

    //loop through all values and assign to the node
    foreach ($arr as $key => $val) {
        $node->$key = $val;
    }

    $n = node_submit($node); // Prepare node for saving

    //if there is an error saving the node we return false
    try {
        node_save($n);
    } catch (Exception $e) {
        return false;
    }

    return $n;
}

function thisWeekInfo($date = false)
{
    //#TODO change this to something based on the user
    date_default_timezone_set('America/Los_Angeles');

    $r = array();

    $ts = time();

    $is_today = true;
    $is_this_week = true;
    $seconds_in_a_day = 60 * 60 * 24;

    if ($date) {
        $ts = strtotime($date);
        $is_today = (date('z-Y', time()) === date('z-Y', $ts));
        $is_this_week = (date('W-Y', time()) === date('W-Y', $ts));
    }

    $date_string = date('Y-m-d', $ts);

    $day_of_week = date('l', $ts);
    $index_of_week = date('N', $ts);
    $is_weekend = ((int)$index_of_week > 5);

    if ($day_of_week == 'Monday') {
        if ($is_today) {
            $begining_of_week_ts = strtotime('now', $ts);
        } else {
            $begining_of_week_ts = strtotime(date('Y-m-d', $ts));
        }
    } else {
        $begining_of_week_ts = strtotime('Last Monday', $ts);
    }

    if ($is_today && $day_of_week == 'Sunday') {
        //today is sunday so get the beginging of the day plus a days worth of seconds
        $end_of_week_ts = strtotime('Y-m-d', $ts) + $seconds_in_a_day - 1;
    } else {
        //next monday minus 1 second would give use sunday night
        $end_of_week_ts = strtotime('Next Monday', $ts) - 1;
    }

    $begining_of_week_date = date('Y-m-d', $begining_of_week_ts);
    $end_of_week_date = date('Y-m-d', $end_of_week_ts);

    $days = array();
    $days_of_week = array(
        'Monday',
        'Tuesday',
        'Wednesday',
        'Thursday',
        'Friday',
        'Saturday',
        'Sunday',
    );
    $i = 0;
    foreach ($days_of_week as $day) {
        $key = $day;
        $days[$key] = array();

        $start_ts = $begining_of_week_ts + ($i * $seconds_in_a_day);
        $date = date('Y-m-d', $start_ts);
        $end_ts = $begining_of_week_ts + ((($i + 1) * $seconds_in_a_day) - 1);

        $days[$key]['start_ts'] = $start_ts;
        $days[$key]['end_ts'] = $end_ts;
        $days[$key]['date'] = $date;
        $days[$key]['weekend'] = (date('N', $start_ts) > 5);
        $days[$key]['is_today'] = (date('z-Y', time()) === date('z-Y', $start_ts));
        $i++;
    }

    $current_ts = time();

    return array(
        'is_today' => $is_today,
        'day_of_week' => $day_of_week,
        'index_of_week' => $index_of_week,
        'is_weekend' => $is_weekend,
        'current_week' => $is_this_week,
        'current_ts' => $current_ts,
        'date_ts' => $ts,
        'date' => $date_string,
        'current_date' => date('Y-m-d', $current_ts),
        'week' => array(
            'start_ts' => $begining_of_week_ts,
            'start_date' => $begining_of_week_date,
            'end_ts' => $end_of_week_ts,
            'end_date' => $end_of_week_date,
        ),
        'days' => $days,
    );

}

function _time_elapsed_string($ptime)
{
    $etime = time() - $ptime;

    if ($etime < 1) {
        return '0 seconds';
    }

    $a = array(365 * 24 * 60 * 60 => 'year',
        30 * 24 * 60 * 60 => 'month',
        24 * 60 * 60 => 'day',
        60 * 60 => 'hour',
        60 => 'minute',
        1 => 'second',
    );
    $a_plural = array('year' => 'years',
        'month' => 'months',
        'day' => 'days',
        'hour' => 'hours',
        'minute' => 'minutes',
        'second' => 'seconds',
    );

    foreach ($a as $secs => $str) {
        $d = $etime / $secs;
        if ($d >= 1) {
            $r = round($d);
            return $r . ' ' . ($r > 1 ? $a_plural[$str] : $str) . ' ago';
        }
    }
}

function _load_user_by_email($user_email)
{

    $sql = "SELECT uid from {users} WHERE mail=:email";
    $values = array(":email" => $user_email);

    $result = db_query($sql, $values);

    $data = $result->fetchAssoc();

    if ($data) {
        $user = user_load($data['uid']);
    }

    return (isset($user)) ? $user : false;
}

function _load_node_basic($nid)
{

    $r = false;

    if (!$nid) {
        return $r;
    }

    $sql = "SELECT title, nid, type, uid, changed, created FROM {node} WHERE nid=:nid";

    $query = db_query($sql, array(":nid" => $nid));
    $r = $result = $query->fetchAssoc();

    return $r;
}

function _get_users_classes($uid = false)
{


    if (!$uid) {
        global $user;
    } else {
        $user = user_load($uid);
    }

    $user_roles = $user->roles;
    $rid_array = array_keys($user_roles);
    $sql_roles = "'" . join("','", $rid_array) . "'";


    $sql = "SELECT node.title AS title, node.nid AS nid
					FROM
					{node} node
					LEFT JOIN {field_data_field_access_roles} field_data_field_access_roles ON node.nid = field_data_field_access_roles.entity_id AND (field_data_field_access_roles.entity_type = 'node' AND field_data_field_access_roles.deleted = '0')
					WHERE (( (node.status = '1') AND (node.type IN  ('class')) AND (field_data_field_access_roles.field_access_roles_value IN (" . $sql_roles . ")) ))
					GROUP BY nid
					ORDER BY title DESC
					LIMIT 10 OFFSET 0";

    $result = db_query($sql);


    return $result->fetchAll();
}

function _get_current_classes()
{

    $sql = "SELECT node.title AS node_title, node.nid AS nid, node.created AS node_created
            FROM
            {node} node
            LEFT JOIN {field_data_field_start_end_date} field_data_field_start_end_date ON node.nid = field_data_field_start_end_date.entity_id AND (field_data_field_start_end_date.entity_type = 'node' AND field_data_field_start_end_date.deleted = '0')
            WHERE (( (node.status = '1') AND (node.type IN  ('class')) AND (DATE_FORMAT(FROM_UNIXTIME(field_data_field_start_end_date.field_start_end_date_value), '%Y-%m-%d') <= :now) AND (DATE_FORMAT(FROM_UNIXTIME(field_data_field_start_end_date.field_start_end_date_value2), '%Y-%m-%d') >= :now) ))
            ORDER BY node_created DESC";

    $today_date_format = date("Y-m-d");
    $values = array(":now" => $today_date_format);

    $result = db_query($sql, $values);

    return $result->fetchAll();
}

function check_user_roles($instructor, $student)
{
    global $user;

    $arguments = func_get_args();

    $r = false;

    foreach ($arguments as $roles) {

        if (user_has_role(array_search($roles, user_roles()))) {
            $r = true;
            break;
        }
    }

    return $r;
}

function _get_results_by_sa_nid($nid = false)
{

    $sql = "SELECT node.title AS node_title, node.nid AS nid
            FROM
            {node} node
            LEFT JOIN {field_data_field_related_resources} field_data_field_related_resources ON node.nid = field_data_field_related_resources.entity_id AND (field_data_field_related_resources.entity_type = 'node' AND field_data_field_related_resources.deleted = '0')
            WHERE (( (node.status = '1') AND (node.type IN  ('skill_assessment_results')) AND (field_data_field_related_resources.field_related_resources_nid IN  (:nid)) ))";

    $result = db_query($sql, array(':nid' => array($nid)));

    return $result->fetchAssoc();
}

function _get_sa_link_by_result_nid($result_nid)
{

    $result_node = node_load($result_nid);

    $sa_nid = (isset($result_node->field_related_resources['und'])) ? $result_node->field_related_resources['und'][0]['nid'] : false;

    if (!$sa_nid) {
        return false;
    }

    $sa_node = node_load($sa_nid);

    $r = array(
        'student' => null,
        'instructor' => null
    );

    if (isset($sa_node->field_reference_link['und'])) {
        $r['student'] = $sa_node->field_reference_link['und'][0]['value'];
    }

    if (isset($sa_node->field_instructor_reference_link['und'])) {
        $r['instructor'] = $sa_node->field_instructor_reference_link['und'][0]['value'];
    }


    return $r;
}


function _get_user_get_basic_info($uid = false)
{
    $r = array(
        'uid' => $uid,
        'name' => '',
        'username' => '',
        'email' => '',
        'roles' => array()
    );

    //@TODO - replace with sql call instead of loading all information then filtering
    $user = user_load($uid);

    if ($user) {
        $r['email'] = $user->mail;
        $r['username'] = $user->name;
        $r['roles'] = $user->roles;
        $first_name = (isset($user->field_first_name['und'])) ? $user->field_first_name['und'][0]['safe_value'] : '';
        $last_name = (isset($user->field_last_name['und'])) ? $user->field_last_name['und'][0]['safe_value'] : '';
        $r['name'] = $first_name . ' ' . $last_name;
    }

    return $r;
}